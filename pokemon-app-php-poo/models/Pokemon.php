<?php

// This is a autogenerated file:Pokemon

class Pokemon {
    private string $name; // json:name Required
    private string $image; // json:image Required
    private int $weight; // json:weight Required
    private int $height; // json:height Required
    private array $types; // json:types Required

    /**
     * @param string $name
     * @param string $image
     * @param int $weight
     * @param int $height
     * @param array $types
     */
    public function __construct(string $name, string $image, int $weight, int $height, array $types) {
        $this->name = $name;
        $this->image = $image;
        $this->weight = $weight;
        $this->height = $height;
        $this->types = $types;
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromName(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toName(): string {
        if (Pokemon::validateName($this->name))  {
            return $this->name; /*string*/
        }
        throw new Exception('never get to this Pokemon::name');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateName(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Pokemon::name");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getName(): string {
        if (Pokemon::validateName($this->name))  {
            return $this->name;
        }
        throw new Exception('never get to getName Pokemon::name');
    }

    /**
     * @return string
     */
    public static function sampleName(): string {
        return 'Pokemon::name::31'; /*31:name*/
    }

    /**
     * @param string $value
     * @throws Exception
     * @return string
     */
    public static function fromImage(string $value): string {
        return $value; /*string*/
    }

    /**
     * @throws Exception
     * @return string
     */
    public function toImage(): string {
        if (Pokemon::validateImage($this->image))  {
            return $this->image; /*string*/
        }
        throw new Exception('never get to this Pokemon::image');
    }

    /**
     * @param string
     * @return bool
     * @throws Exception
     */
    public static function validateImage(string $value): bool {
        if (!is_string($value)) {
            throw new Exception("Attribute Error:Pokemon::image");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return string
     */
    public function getImage(): string {
        if (Pokemon::validateImage($this->image))  {
            return $this->image;
        }
        throw new Exception('never get to getImage Pokemon::image');
    }

    /**
     * @return string
     */
    public static function sampleImage(): string {
        return 'Pokemon::image::32'; /*32:image*/
    }

    /**
     * @param int $value
     * @throws Exception
     * @return int
     */
    public static function fromWeight(int $value): int {
        return $value; /*int*/
    }

    /**
     * @throws Exception
     * @return int
     */
    public function toWeight(): int {
        if (Pokemon::validateWeight($this->weight))  {
            return $this->weight; /*int*/
        }
        throw new Exception('never get to this Pokemon::weight');
    }

    /**
     * @param int
     * @return bool
     * @throws Exception
     */
    public static function validateWeight(int $value): bool {
        if (!is_integer($value)) {
            throw new Exception("Attribute Error:Pokemon::weight");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return int
     */
    public function getWeight(): int {
        if (Pokemon::validateWeight($this->weight))  {
            return $this->weight;
        }
        throw new Exception('never get to getWeight Pokemon::weight');
    }

    /**
     * @return int
     */
    public static function sampleWeight(): int {
        return 33; /*33:weight*/
    }

    /**
     * @param int $value
     * @throws Exception
     * @return int
     */
    public static function fromHeight(int $value): int {
        return $value; /*int*/
    }

    /**
     * @throws Exception
     * @return int
     */
    public function toHeight(): int {
        if (Pokemon::validateHeight($this->height))  {
            return $this->height; /*int*/
        }
        throw new Exception('never get to this Pokemon::height');
    }

    /**
     * @param int
     * @return bool
     * @throws Exception
     */
    public static function validateHeight(int $value): bool {
        if (!is_integer($value)) {
            throw new Exception("Attribute Error:Pokemon::height");
        }
        return true;
    }

    /**
     * @throws Exception
     * @return int
     */
    public function getHeight(): int {
        if (Pokemon::validateHeight($this->height))  {
            return $this->height;
        }
        throw new Exception('never get to getHeight Pokemon::height');
    }

    /**
     * @return int
     */
    public static function sampleHeight(): int {
        return 34; /*34:height*/
    }

    /**
     * @param array $value
     * @throws Exception
     * @return array
     */
    public static function fromTypes(array $value): array {
        return  array_map(function ($value) {
            return $value; /*string*/
        }, $value);
    }

    /**
     * @throws Exception
     * @return array
     */
    public function toTypes(): array {
        if (Pokemon::validateTypes($this->types))  {
            return array_map(function ($value) {
                return $value; /*string*/
            }, $this->types);
        }
        throw new Exception('never get to this Pokemon::types');
    }

    /**
     * @param array
     * @return bool
     * @throws Exception
     */
    public static function validateTypes(array $value): bool {
        if (!is_array($value)) {
            throw new Exception("Attribute Error:Pokemon::types");
        }
        array_walk($value, function($value_v) {
            if (!is_string($value_v)) {
                throw new Exception("Attribute Error:Pokemon::types");
            }
        });
        return true;
    }

    /**
     * @throws Exception
     * @return array
     */
    public function getTypes(): array {
        if (Pokemon::validateTypes($this->types))  {
            return $this->types;
        }
        throw new Exception('never get to getTypes Pokemon::types');
    }

    /**
     * @return array
     */
    public static function sampleTypes(): array {
        return  array(
            'Pokemon::::35' /*35:*/
        ); /* 35:types*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return Pokemon::validateName($this->name)
        || Pokemon::validateImage($this->image)
        || Pokemon::validateWeight($this->weight)
        || Pokemon::validateHeight($this->height)
        || Pokemon::validateTypes($this->types);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'name'} = $this->toName();
        $out->{'image'} = $this->toImage();
        $out->{'weight'} = $this->toWeight();
        $out->{'height'} = $this->toHeight();
        $out->{'types'} = $this->toTypes();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return Pokemon
     * @throws Exception
     */
    public static function from(stdClass $obj): Pokemon {
        return new Pokemon(
         Pokemon::fromName($obj->{'name'})
        ,Pokemon::fromImage($obj->{'image'})
        ,Pokemon::fromWeight($obj->{'weight'})
        ,Pokemon::fromHeight($obj->{'height'})
        ,Pokemon::fromTypes($obj->{'types'})
        );
    }

    /**
     * @return Pokemon
     */
    public static function sample(): Pokemon {
        return new Pokemon(
         Pokemon::sampleName()
        ,Pokemon::sampleImage()
        ,Pokemon::sampleWeight()
        ,Pokemon::sampleHeight()
        ,Pokemon::sampleTypes()
        );
    }
}
